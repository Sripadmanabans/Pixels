import com.android.build.gradle.BaseExtension

buildscript {

  ext.buildConfig = [
      "compileSdk": 31,
      "minSdk"    : 29,
      "targetSdk" : 31,

      "version"   : [
          "major": 1,
          "minor": 0,
          "patch": 0,
          "build": 0,
      ],
  ]
  ext.buildConfig.version["name"] = "${buildConfig.version.major}.${buildConfig.version.minor}.${buildConfig.version.patch}"
  ext.buildConfig.version["fullName"] = "${buildConfig.version.name}.${buildConfig.version.build}"
  ext.buildConfig.version["code"] = buildConfig.version.major * 1000000 + buildConfig.version.minor * 10000 + buildConfig.version.patch * 100 + buildConfig.version.build

  repositories {
    google()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  }

  dependencies {
    classpath(libs.android.classpath)
    classpath(libs.anvil.classpath)
    classpath(libs.ben.classpath)
    classpath(libs.detekt.classpath)
    classpath(libs.junit5.android.classpath)
    classpath(libs.kotlin.classpath)
    classpath(libs.spotless.classpath)
    classpath(libs.sqlDelight.classpath)
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.39.0"
  id "com.google.devtools.ksp" version "1.5.31-1.0.0"
}

allprojects {
  repositories {
    google()
    mavenCentral()
    // Used for Accompanist snapshots
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    def composeSnapshot = libs.versions.composeSnapshot.get()
    if (composeSnapshot.length() > 1) {
      maven { url "https://androidx.dev/snapshots/builds/$composeSnapshot/artifacts/repository/" }
    }
  }
}

subprojects {
  configurations.configureEach {
    // We forcefully exclude AppCompat + MDC from any transitive dependencies.
    // This is a Compose app, so there's no need for these.
    exclude group: "androidx.appcompat"
    exclude group: "com.google.android.material", module: "material"

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == "org.jetbrains.kotlinx"
          && details.requested.module.name == "kotlinx-collections-immutable-jvm") {
        // kotlinx-collections-immutable-jvm 0.3.4+ is available on Maven Central
        details.useVersion "0.3.4"
      }
      // Can be removed when SQL Delight upgrades kotlin version.
      if (details.requested.group == "org.jetbrains.kotlin"
          && details.requested.module.name.startsWith("kotlin-stdlib")) {
        details.useVersion libs.versions.kotlin.get()
      }
      // Forcing compose to one version.
      if (details.requested.group.startsWith("androidx.compose")) {
        details.useVersion libs.versions.compose.get()
      }
      // Forcing lifecycle to one version.
      if (details.requested.group.startsWith("androidx.lifecycle")) {
        details.useVersion libs.versions.lifecycle.get()
      }
    }
  }

  apply plugin: "com.diffplug.spotless"
  apply plugin: "io.gitlab.arturbosch.detekt"

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
      allWarningsAsErrors = true

      freeCompilerArgs += "-XXLanguage:+NewInference"
      freeCompilerArgs += "-progressive"

      jvmTarget = "11"
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
    def extension = project.extensions.getByName("android") as BaseExtension
    extension.compileOptions {
      sourceCompatibility = JavaVersion.VERSION_11
      targetCompatibility = JavaVersion.VERSION_11
    }
  }

  tasks.withType(JavaCompile).configureEach { task ->
    task.sourceCompatibility = JavaVersion.VERSION_11
    task.targetCompatibility = JavaVersion.VERSION_11
  }

  tasks.withType(Test) {
    testLogging {
      events "skipped", "failed", "passed"
    }
  }
  // TODO same thing for instrumentation tests: https://issuetracker.google.com/issues/37056080
  //tasks.withType(AndroidTestTask) {
  //  testLogging {
  //    events "skipped", "failed", "passed"
  //  }
  //}

  spotless {
    kotlin {
      target "src/**/*.kt"
      def userData = [
          "indent_size"             : "2",
          "continuation_indent_size": "4",
          "insert_final_newline"    : "true",
      ]
      ktlint("0.42.1").userData(userData)
    }
  }

  detekt {
    config = files("${rootDir}/detekt.yml")
    // Treat config file as an override for the default config.
    buildUponDefaultConfig = true
  }
}

@SuppressWarnings('unused')
def propOrEmpty(String name) {
  return hasProperty(name) ? getProperty(name) : ''
}
